// This file is @generated by prost-build.
/// Intent object crafted by Turnkey based on the user request, used to assess the permissibility of an action.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Intent {
    #[prost(oneof="intent::Inner", tags="1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65")]
    pub inner: ::core::option::Option<intent::Inner>,
}
/// Nested message and enum types in `Intent`.
pub mod intent {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Inner {
        #[prost(message, tag="1")]
        CreateOrganizationIntent(super::CreateOrganizationIntent),
        #[prost(message, tag="3")]
        CreateAuthenticatorsIntent(super::CreateAuthenticatorsIntent),
        #[prost(message, tag="4")]
        CreateUsersIntent(super::CreateUsersIntent),
        #[prost(message, tag="5")]
        CreatePrivateKeysIntent(super::CreatePrivateKeysIntent),
        #[prost(message, tag="6")]
        SignRawPayloadIntent(super::SignRawPayloadIntent),
        #[prost(message, tag="7")]
        CreateInvitationsIntent(super::CreateInvitationsIntent),
        #[prost(message, tag="8")]
        AcceptInvitationIntent(super::AcceptInvitationIntent),
        #[prost(message, tag="9")]
        CreatePolicyIntent(super::CreatePolicyIntent),
        #[prost(message, tag="10")]
        DisablePrivateKeyIntent(super::DisablePrivateKeyIntent),
        #[prost(message, tag="11")]
        DeleteUsersIntent(super::DeleteUsersIntent),
        #[prost(message, tag="12")]
        DeleteAuthenticatorsIntent(super::DeleteAuthenticatorsIntent),
        #[prost(message, tag="13")]
        DeleteInvitationIntent(super::DeleteInvitationIntent),
        #[prost(message, tag="14")]
        DeleteOrganizationIntent(super::DeleteOrganizationIntent),
        #[prost(message, tag="15")]
        DeletePolicyIntent(super::DeletePolicyIntent),
        #[prost(message, tag="16")]
        CreateUserTagIntent(super::CreateUserTagIntent),
        #[prost(message, tag="17")]
        DeleteUserTagsIntent(super::DeleteUserTagsIntent),
        #[prost(message, tag="18")]
        SignTransactionIntent(super::SignTransactionIntent),
        #[prost(message, tag="19")]
        CreateApiKeysIntent(super::CreateApiKeysIntent),
        #[prost(message, tag="20")]
        DeleteApiKeysIntent(super::DeleteApiKeysIntent),
        #[prost(message, tag="21")]
        ApproveActivityIntent(super::ApproveActivityIntent),
        #[prost(message, tag="22")]
        RejectActivityIntent(super::RejectActivityIntent),
        #[prost(message, tag="23")]
        CreatePrivateKeyTagIntent(super::CreatePrivateKeyTagIntent),
        #[prost(message, tag="24")]
        DeletePrivateKeyTagsIntent(super::DeletePrivateKeyTagsIntent),
        #[prost(message, tag="25")]
        CreatePolicyIntentV2(super::CreatePolicyIntentV2),
        #[prost(message, tag="26")]
        SetPaymentMethodIntent(super::SetPaymentMethodIntent),
        #[prost(message, tag="27")]
        ActivateBillingTierIntent(super::ActivateBillingTierIntent),
        #[prost(message, tag="28")]
        DeletePaymentMethodIntent(super::DeletePaymentMethodIntent),
        #[prost(message, tag="29")]
        CreatePolicyIntentV3(super::CreatePolicyIntentV3),
        #[prost(message, tag="30")]
        CreateApiOnlyUsersIntent(super::CreateApiOnlyUsersIntent),
        #[prost(message, tag="31")]
        UpdateRootQuorumIntent(super::UpdateRootQuorumIntent),
        #[prost(message, tag="32")]
        UpdateUserTagIntent(super::UpdateUserTagIntent),
        #[prost(message, tag="33")]
        UpdatePrivateKeyTagIntent(super::UpdatePrivateKeyTagIntent),
        #[prost(message, tag="34")]
        CreateAuthenticatorsIntentV2(super::CreateAuthenticatorsIntentV2),
        #[prost(message, tag="35")]
        AcceptInvitationIntentV2(super::AcceptInvitationIntentV2),
        #[prost(message, tag="36")]
        CreateOrganizationIntentV2(super::CreateOrganizationIntentV2),
        #[prost(message, tag="37")]
        CreateUsersIntentV2(super::CreateUsersIntentV2),
        #[prost(message, tag="38")]
        CreateSubOrganizationIntent(super::CreateSubOrganizationIntent),
        #[prost(message, tag="39")]
        CreateSubOrganizationIntentV2(super::CreateSubOrganizationIntentV2),
        #[prost(message, tag="40")]
        UpdateAllowedOriginsIntent(super::UpdateAllowedOriginsIntent),
        #[prost(message, tag="41")]
        CreatePrivateKeysIntentV2(super::CreatePrivateKeysIntentV2),
        #[prost(message, tag="42")]
        UpdateUserIntent(super::UpdateUserIntent),
        #[prost(message, tag="43")]
        UpdatePolicyIntent(super::UpdatePolicyIntent),
        #[prost(message, tag="44")]
        SetPaymentMethodIntentV2(super::SetPaymentMethodIntentV2),
        #[prost(message, tag="45")]
        CreateSubOrganizationIntentV3(super::CreateSubOrganizationIntentV3),
        #[prost(message, tag="46")]
        CreateWalletIntent(super::CreateWalletIntent),
        #[prost(message, tag="47")]
        CreateWalletAccountsIntent(super::CreateWalletAccountsIntent),
        #[prost(message, tag="48")]
        InitUserEmailRecoveryIntent(super::InitUserEmailRecoveryIntent),
        #[prost(message, tag="49")]
        RecoverUserIntent(super::RecoverUserIntent),
        #[prost(message, tag="50")]
        SetOrganizationFeatureIntent(super::SetOrganizationFeatureIntent),
        #[prost(message, tag="51")]
        RemoveOrganizationFeatureIntent(super::RemoveOrganizationFeatureIntent),
        #[prost(message, tag="52")]
        SignRawPayloadIntentV2(super::SignRawPayloadIntentV2),
        #[prost(message, tag="53")]
        SignTransactionIntentV2(super::SignTransactionIntentV2),
        #[prost(message, tag="54")]
        ExportPrivateKeyIntent(super::ExportPrivateKeyIntent),
        #[prost(message, tag="55")]
        ExportWalletIntent(super::ExportWalletIntent),
        #[prost(message, tag="56")]
        CreateSubOrganizationIntentV4(super::CreateSubOrganizationIntentV4),
        #[prost(message, tag="57")]
        EmailAuthIntent(super::EmailAuthIntent),
        #[prost(message, tag="58")]
        ExportWalletAccountIntent(super::ExportWalletAccountIntent),
        #[prost(message, tag="59")]
        InitImportWalletIntent(super::InitImportWalletIntent),
        #[prost(message, tag="60")]
        ImportWalletIntent(super::ImportWalletIntent),
        #[prost(message, tag="61")]
        InitImportPrivateKeyIntent(super::InitImportPrivateKeyIntent),
        #[prost(message, tag="62")]
        ImportPrivateKeyIntent(super::ImportPrivateKeyIntent),
        #[prost(message, tag="63")]
        CreatePoliciesIntent(super::CreatePoliciesIntent),
        #[prost(message, tag="64")]
        SignRawPayloadsIntent(super::SignRawPayloadsIntent),
        #[prost(message, tag="65")]
        CreateReadOnlySessionIntent(super::CreateReadOnlySessionIntent),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeletePaymentMethodIntent {
    #[prost(string, optional, tag="1")]
    pub payment_method_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivateBillingTierIntent {
    /// @inject_tag: validate:"required"
    #[prost(string, tag="1")]
    pub product_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetPaymentMethodIntent {
    /// @inject_tag: validate:"required,max=16,numeric"
    #[prost(string, tag="1")]
    pub number: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required,max=4,numeric"
    #[prost(string, tag="2")]
    pub cvv: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required,numeric,len=2"
    #[prost(string, tag="3")]
    pub expiry_month: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required,numeric,len=4"
    #[prost(string, tag="4")]
    pub expiry_year: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required,email,tk_email"
    #[prost(string, tag="5")]
    pub card_holder_email: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required,tk_label_length"
    #[prost(string, tag="6")]
    pub card_holder_name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetPaymentMethodIntentV2 {
    /// @inject_tag: validate:"required,max=256"
    #[prost(string, tag="1")]
    pub payment_method_id: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required,email,tk_email"
    #[prost(string, tag="2")]
    pub card_holder_email: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required,tk_label_length"
    #[prost(string, tag="3")]
    pub card_holder_name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateOrganizationIntent {
    /// @inject_tag: validate:"required,tk_label_length"
    #[prost(string, tag="1")]
    pub organization_name: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required,email,tk_email"
    #[prost(string, tag="2")]
    pub root_email: ::prost::alloc::string::String,
    #[prost(message, optional, tag="3")]
    pub root_authenticator: ::core::option::Option<AuthenticatorParams>,
    /// @inject_tag: validate:"uuid"
    #[prost(string, optional, tag="4")]
    pub root_user_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateOrganizationIntentV2 {
    /// @inject_tag: validate:"required,tk_label,tk_label_length"
    #[prost(string, tag="1")]
    pub organization_name: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required,email,tk_email"
    #[prost(string, tag="2")]
    pub root_email: ::prost::alloc::string::String,
    #[prost(message, optional, tag="3")]
    pub root_authenticator: ::core::option::Option<AuthenticatorParamsV2>,
    /// @inject_tag: validate:"uuid"
    #[prost(string, optional, tag="4")]
    pub root_user_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateAuthenticatorsIntent {
    /// @inject_tag: validate:"dive,required"
    #[prost(message, repeated, tag="1")]
    pub authenticators: ::prost::alloc::vec::Vec<AuthenticatorParams>,
    /// @inject_tag: validate:"required,uuid"
    #[prost(string, tag="2")]
    pub user_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateAuthenticatorsIntentV2 {
    /// @inject_tag: validate:"dive,required"
    #[prost(message, repeated, tag="1")]
    pub authenticators: ::prost::alloc::vec::Vec<AuthenticatorParamsV2>,
    /// @inject_tag: validate:"required,uuid"
    #[prost(string, tag="2")]
    pub user_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateApiKeysIntent {
    /// @inject_tag: validate:"dive,required"
    #[prost(message, repeated, tag="1")]
    pub api_keys: ::prost::alloc::vec::Vec<ApiKeyParams>,
    /// @inject_tag: validate:"required,uuid"
    #[prost(string, tag="2")]
    pub user_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateUsersIntent {
    /// @inject_tag: validate:"required,dive,required"
    #[prost(message, repeated, tag="1")]
    pub users: ::prost::alloc::vec::Vec<UserParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateUsersIntentV2 {
    /// @inject_tag: validate:"required,dive,required"
    #[prost(message, repeated, tag="1")]
    pub users: ::prost::alloc::vec::Vec<UserParamsV2>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateUserIntent {
    /// @inject_tag: validate:"uuid"
    #[prost(string, tag="1")]
    pub user_id: ::prost::alloc::string::String,
    /// @inject_tag: validate:"omitempty,tk_label,tk_label_length"
    #[prost(string, optional, tag="2")]
    pub user_name: ::core::option::Option<::prost::alloc::string::String>,
    /// @inject_tag: validate:"omitempty,email,tk_email"
    #[prost(string, optional, tag="3")]
    pub user_email: ::core::option::Option<::prost::alloc::string::String>,
    /// @inject_tag: validate:"omitempty,dive,uuid"
    #[prost(string, repeated, tag="4")]
    pub user_tag_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateInvitationsIntent {
    /// @inject_tag: validate:"required,dive,required"
    #[prost(message, repeated, tag="1")]
    pub invitations: ::prost::alloc::vec::Vec<InvitationParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AcceptInvitationIntent {
    /// @inject_tag: validate:"required,uuid"
    #[prost(string, tag="1")]
    pub invitation_id: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required,uuid"
    #[prost(string, tag="2")]
    pub user_id: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required"
    #[prost(message, optional, tag="3")]
    pub authenticator: ::core::option::Option<AuthenticatorParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AcceptInvitationIntentV2 {
    /// @inject_tag: validate:"required,uuid"
    #[prost(string, tag="1")]
    pub invitation_id: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required,uuid"
    #[prost(string, tag="2")]
    pub user_id: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required"
    #[prost(message, optional, tag="3")]
    pub authenticator: ::core::option::Option<AuthenticatorParamsV2>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateApiOnlyUsersIntent {
    /// @inject_tag: validate:"required,dive,required"
    #[prost(message, repeated, tag="1")]
    pub api_only_users: ::prost::alloc::vec::Vec<ApiOnlyUserParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateWalletIntent {
    /// @inject_tag: validate:"required,tk_label_length,tk_label"
    #[prost(string, tag="1")]
    pub wallet_name: ::prost::alloc::string::String,
    /// @inject_tag: validate:"dive,required"
    #[prost(message, repeated, tag="2")]
    pub accounts: ::prost::alloc::vec::Vec<WalletAccountParams>,
    /// @inject_tag: validate:"omitempty"
    #[prost(int32, optional, tag="3")]
    pub mnemonic_length: ::core::option::Option<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateWalletAccountsIntent {
    /// @inject_tag: validate:"required,uuid"
    #[prost(string, tag="1")]
    pub wallet_id: ::prost::alloc::string::String,
    /// @inject_tag: validate:"dive,required"
    #[prost(message, repeated, tag="2")]
    pub accounts: ::prost::alloc::vec::Vec<WalletAccountParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePrivateKeysIntent {
    /// @inject_tag: validate:"dive,required"
    #[prost(message, repeated, tag="2")]
    pub private_keys: ::prost::alloc::vec::Vec<PrivateKeyParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePrivateKeysIntentV2 {
    /// @inject_tag: validate:"dive,required"
    #[prost(message, repeated, tag="1")]
    pub private_keys: ::prost::alloc::vec::Vec<PrivateKeyParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignRawPayloadIntent {
    /// @inject_tag: validate:"required,uuid"
    #[prost(string, tag="2")]
    pub private_key_id: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required"
    #[prost(string, tag="3")]
    pub payload: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required"
    #[prost(enumeration="super::super::common::v1::PayloadEncoding", tag="4")]
    pub encoding: i32,
    #[prost(enumeration="super::super::common::v1::HashFunction", tag="5")]
    pub hash_function: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignRawPayloadIntentV2 {
    /// @inject_tag: validate:"required"
    #[prost(string, tag="1")]
    pub sign_with: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required"
    #[prost(string, tag="2")]
    pub payload: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required"
    #[prost(enumeration="super::super::common::v1::PayloadEncoding", tag="3")]
    pub encoding: i32,
    #[prost(enumeration="super::super::common::v1::HashFunction", tag="4")]
    pub hash_function: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignRawPayloadsIntent {
    /// @inject_tag: validate:"required"
    #[prost(string, tag="1")]
    pub sign_with: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required"
    #[prost(string, repeated, tag="2")]
    pub payloads: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// @inject_tag: validate:"required"
    #[prost(enumeration="super::super::common::v1::PayloadEncoding", tag="3")]
    pub encoding: i32,
    #[prost(enumeration="super::super::common::v1::HashFunction", tag="4")]
    pub hash_function: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePolicyIntent {
    /// @inject_tag: validate:"required,tk_label_length"
    #[prost(string, tag="1")]
    pub policy_name: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required,dive,required"
    #[prost(message, repeated, tag="2")]
    pub selectors: ::prost::alloc::vec::Vec<Selector>,
    #[prost(enumeration="super::super::common::v1::Effect", tag="3")]
    pub effect: i32,
    #[prost(string, tag="4")]
    pub notes: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePolicyIntentV2 {
    /// @inject_tag: validate:"required,tk_label_length"
    #[prost(string, tag="1")]
    pub policy_name: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required,dive,required"
    #[prost(message, repeated, tag="2")]
    pub selectors: ::prost::alloc::vec::Vec<SelectorV2>,
    #[prost(enumeration="super::super::common::v1::Effect", tag="3")]
    pub effect: i32,
    #[prost(string, tag="4")]
    pub notes: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePolicyIntentV3 {
    /// @inject_tag: validate:"required,tk_label,tk_label_length"
    #[prost(string, tag="1")]
    pub policy_name: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required"
    #[prost(enumeration="super::super::common::v1::Effect", tag="2")]
    pub effect: i32,
    #[prost(string, optional, tag="3")]
    pub condition: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="4")]
    pub consensus: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag="5")]
    pub notes: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePoliciesIntent {
    #[prost(message, repeated, tag="1")]
    pub policies: ::prost::alloc::vec::Vec<CreatePolicyIntentV3>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateReadOnlySessionIntent {
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Selector {
    #[prost(string, tag="1")]
    pub subject: ::prost::alloc::string::String,
    #[prost(enumeration="super::super::common::v1::Operator", tag="2")]
    pub operator: i32,
    #[prost(string, tag="3")]
    pub target: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SelectorV2 {
    #[prost(string, tag="1")]
    pub subject: ::prost::alloc::string::String,
    #[prost(enumeration="super::super::common::v1::Operator", tag="2")]
    pub operator: i32,
    #[prost(string, repeated, tag="3")]
    pub targets: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DisablePrivateKeyIntent {
    /// @inject_tag: validate:"required,uuid"
    #[prost(string, tag="1")]
    pub private_key_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteUsersIntent {
    /// @inject_tag: validate:"required,dive,required,uuid"
    #[prost(string, repeated, tag="1")]
    pub user_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteInvitationIntent {
    /// @inject_tag: validate:"required,uuid"
    #[prost(string, tag="1")]
    pub invitation_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteApiKeysIntent {
    /// @inject_tag: validate:"required,uuid"
    #[prost(string, tag="1")]
    pub user_id: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required,dive,required,uuid"
    #[prost(string, repeated, tag="2")]
    pub api_key_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteAuthenticatorsIntent {
    /// @inject_tag: validate:"required,uuid"
    #[prost(string, tag="1")]
    pub user_id: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required,dive,required,uuid"
    #[prost(string, repeated, tag="2")]
    pub authenticator_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteOrganizationIntent {
    /// @inject_tag: validate:"required,uuid"
    #[prost(string, tag="1")]
    pub organization_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeletePolicyIntent {
    /// @inject_tag: validate:"required,uuid"
    #[prost(string, tag="1")]
    pub policy_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateUserTagIntent {
    /// @inject_tag: validate:"required,tk_label,tk_label_length"
    #[prost(string, tag="1")]
    pub user_tag_name: ::prost::alloc::string::String,
    /// @inject_tag: validate:"dive,uuid"
    #[prost(string, repeated, tag="3")]
    pub user_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateUserTagIntent {
    /// @inject_tag: validate:"uuid"
    #[prost(string, tag="1")]
    pub user_tag_id: ::prost::alloc::string::String,
    /// @inject_tag: validate:"omitempty,tk_label,tk_label_length"
    #[prost(string, optional, tag="2")]
    pub new_user_tag_name: ::core::option::Option<::prost::alloc::string::String>,
    /// @inject_tag: validate:"dive,uuid"
    #[prost(string, repeated, tag="3")]
    pub add_user_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// @inject_tag: validate:"dive,uuid"
    #[prost(string, repeated, tag="4")]
    pub remove_user_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteUserTagsIntent {
    /// @inject_tag: validate:"required,dive,required,uuid"
    #[prost(string, repeated, tag="1")]
    pub user_tag_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePrivateKeyTagIntent {
    /// @inject_tag: validate:"required,tk_label,tk_label_length"
    #[prost(string, tag="1")]
    pub private_key_tag_name: ::prost::alloc::string::String,
    /// @inject_tag: validate:"dive,uuid"
    #[prost(string, repeated, tag="3")]
    pub private_key_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdatePrivateKeyTagIntent {
    /// @inject_tag: validate:"uuid"
    #[prost(string, tag="1")]
    pub private_key_tag_id: ::prost::alloc::string::String,
    /// @inject_tag: validate:"omitempty,tk_label,tk_label_length"
    #[prost(string, optional, tag="2")]
    pub new_private_key_tag_name: ::core::option::Option<::prost::alloc::string::String>,
    /// @inject_tag: validate:"dive,uuid"
    #[prost(string, repeated, tag="3")]
    pub add_private_key_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// @inject_tag: validate:"dive,uuid"
    #[prost(string, repeated, tag="4")]
    pub remove_private_key_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeletePrivateKeyTagsIntent {
    /// @inject_tag: validate:"required,dive,required,uuid"
    #[prost(string, repeated, tag="1")]
    pub private_key_tag_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignTransactionIntent {
    /// @inject_tag: validate:"required,uuid"
    #[prost(string, tag="2")]
    pub private_key_id: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required"
    #[prost(string, tag="3")]
    pub unsigned_transaction: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required"
    #[prost(enumeration="super::super::common::v1::TransactionType", tag="4")]
    pub r#type: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignTransactionIntentV2 {
    /// @inject_tag: validate:"required"
    #[prost(string, tag="1")]
    pub sign_with: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required"
    #[prost(string, tag="2")]
    pub unsigned_transaction: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required"
    #[prost(enumeration="super::super::common::v1::TransactionType", tag="3")]
    pub r#type: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApproveActivityIntent {
    /// @inject_tag: validate:"required"
    #[prost(string, tag="1")]
    pub fingerprint: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RejectActivityIntent {
    /// @inject_tag: validate:"required"
    #[prost(string, tag="1")]
    pub fingerprint: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateRootQuorumIntent {
    /// @inject_tag: validate:"required"
    #[prost(int32, tag="1")]
    pub threshold: i32,
    /// @inject_tag: validate:"dive,uuid"
    #[prost(string, repeated, tag="2")]
    pub user_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateAllowedOriginsIntent {
    /// @inject_tag: validate:"required"
    #[prost(string, repeated, tag="1")]
    pub allowed_origins: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateSubOrganizationIntent {
    /// @inject_tag: validate:"omitempty,tk_label,tk_label_length"
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub root_authenticator: ::core::option::Option<AuthenticatorParamsV2>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateSubOrganizationIntentV2 {
    /// @inject_tag: validate:"omitempty,tk_label,tk_label_length"
    #[prost(string, tag="1")]
    pub sub_organization_name: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required"
    #[prost(message, repeated, tag="2")]
    pub root_users: ::prost::alloc::vec::Vec<RootUserParams>,
    /// @inject_tag: validate:"required"
    #[prost(int32, tag="3")]
    pub root_quorum_threshold: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateSubOrganizationIntentV3 {
    /// @inject_tag: validate:"omitempty,tk_label,tk_label_length"
    #[prost(string, tag="1")]
    pub sub_organization_name: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required"
    #[prost(message, repeated, tag="2")]
    pub root_users: ::prost::alloc::vec::Vec<RootUserParams>,
    /// @inject_tag: validate:"required"
    #[prost(int32, tag="3")]
    pub root_quorum_threshold: i32,
    /// @inject_tag: validate:"dive,required"
    #[prost(message, repeated, tag="4")]
    pub private_keys: ::prost::alloc::vec::Vec<PrivateKeyParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateSubOrganizationIntentV4 {
    /// @inject_tag: validate:"omitempty,tk_label,tk_label_length"
    #[prost(string, tag="1")]
    pub sub_organization_name: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required"
    #[prost(message, repeated, tag="2")]
    pub root_users: ::prost::alloc::vec::Vec<RootUserParams>,
    /// @inject_tag: validate:"required"
    #[prost(int32, tag="3")]
    pub root_quorum_threshold: i32,
    /// @inject_tag: validate:"omitempty"
    #[prost(message, optional, tag="4")]
    pub wallet: ::core::option::Option<WalletParams>,
    /// @inject_tag: validate:"omitempty"
    #[prost(bool, optional, tag="5")]
    pub disable_email_recovery: ::core::option::Option<bool>,
    /// @inject_tag: validate:"omitempty"
    #[prost(bool, optional, tag="6")]
    pub disable_email_auth: ::core::option::Option<bool>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdatePolicyIntent {
    /// @inject_tag: validate:"uuid"
    #[prost(string, tag="1")]
    pub policy_id: ::prost::alloc::string::String,
    /// @inject_tag: validate:"omitempty,tk_label,tk_label_length"
    #[prost(string, optional, tag="2")]
    pub policy_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(enumeration="super::super::common::v1::Effect", optional, tag="3")]
    pub policy_effect: ::core::option::Option<i32>,
    #[prost(string, optional, tag="4")]
    pub policy_condition: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="5")]
    pub policy_consensus: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="6")]
    pub policy_notes: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecoverUserIntent {
    #[prost(message, optional, tag="1")]
    pub authenticator: ::core::option::Option<AuthenticatorParamsV2>,
    /// @inject_tag: validate:"required,uuid"
    #[prost(string, tag="3")]
    pub user_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetOrganizationFeatureIntent {
    #[prost(enumeration="super::super::common::v1::FeatureName", tag="1")]
    pub name: i32,
    #[prost(string, optional, tag="2")]
    pub value: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveOrganizationFeatureIntent {
    #[prost(enumeration="super::super::common::v1::FeatureName", tag="1")]
    pub name: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExportPrivateKeyIntent {
    /// @inject_tag: validate:"required,uuid"
    #[prost(string, tag="1")]
    pub private_key_id: ::prost::alloc::string::String,
    /// @inject_tag: validate:"hexadecimal"
    #[prost(string, tag="2")]
    pub target_public_key: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExportWalletIntent {
    /// @inject_tag: validate:"required,uuid"
    #[prost(string, tag="1")]
    pub wallet_id: ::prost::alloc::string::String,
    /// @inject_tag: validate:"hexadecimal"
    #[prost(string, tag="2")]
    pub target_public_key: ::prost::alloc::string::String,
    /// @inject_tag: validate:"omitempty"
    #[prost(enumeration="super::super::common::v1::MnemonicLanguage", optional, tag="3")]
    pub language: ::core::option::Option<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExportWalletAccountIntent {
    /// @inject_tag: validate:"required"
    #[prost(string, tag="1")]
    pub address: ::prost::alloc::string::String,
    /// @inject_tag: validate:"hexadecimal"
    #[prost(string, tag="2")]
    pub target_public_key: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitImportWalletIntent {
    #[prost(string, tag="1")]
    pub user_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitImportPrivateKeyIntent {
    #[prost(string, tag="1")]
    pub user_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RootUserParams {
    /// @inject_tag: validate:"required,tk_label_length,tk_label"
    #[prost(string, tag="2")]
    pub user_name: ::prost::alloc::string::String,
    /// @inject_tag: validate:"omitempty,email,tk_email"
    #[prost(string, optional, tag="3")]
    pub user_email: ::core::option::Option<::prost::alloc::string::String>,
    /// @inject_tag: validate:"dive"
    #[prost(message, repeated, tag="5")]
    pub api_keys: ::prost::alloc::vec::Vec<ApiKeyParams>,
    /// @inject_tag: validate:"dive"
    #[prost(message, repeated, tag="6")]
    pub authenticators: ::prost::alloc::vec::Vec<AuthenticatorParamsV2>,
}
/// Each of these customization parameters are optional; resort to defaults if any are not provided.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EmailCustomizationParams {
    #[prost(string, optional, tag="1")]
    pub app_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="2")]
    pub logo_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="3")]
    pub magic_link_template: ::core::option::Option<::prost::alloc::string::String>,
    ///
    /// We're electing to support user-provided dynamic template variables via JSON string.
    /// This is for a subset of customers who want to have custom email templates with Turnkey
    /// and the ability to update them on the fly.
    /// The procedure: provide a Turnkey eng the new template, and pass their desired variables through this field.
    /// These variables will get injected into their template. Since we have no control over the defined variables,
    /// we'll opt use a key-value map (JSON string) to set them. Note that we can't use protobuf maps due to serialization issues,
    /// which may produce issues with user request signature verification.
    #[prost(string, optional, tag="4")]
    pub template_variables: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="5")]
    pub template_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitUserEmailRecoveryIntent {
    /// @inject_tag: validate:"email,tk_email"
    #[prost(string, tag="2")]
    pub email: ::prost::alloc::string::String,
    /// @inject_tag: validate:"hexadecimal"
    #[prost(string, tag="3")]
    pub target_public_key: ::prost::alloc::string::String,
    #[prost(string, optional, tag="4")]
    pub expiration_seconds: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag="5")]
    pub email_customization: ::core::option::Option<EmailCustomizationParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EmailAuthIntent {
    /// @inject_tag: validate:"email,tk_email"
    #[prost(string, tag="1")]
    pub email: ::prost::alloc::string::String,
    /// @inject_tag: validate:"hexadecimal"
    #[prost(string, tag="2")]
    pub target_public_key: ::prost::alloc::string::String,
    /// @inject_tag: validate:"omitempty,tk_label_length,tk_label"
    #[prost(string, optional, tag="3")]
    pub api_key_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="4")]
    pub expiration_seconds: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag="5")]
    pub email_customization: ::core::option::Option<EmailCustomizationParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImportWalletIntent {
    /// @inject_tag: validate:"required,uuid"
    #[prost(string, tag="1")]
    pub user_id: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required,tk_label_length,tk_label"
    #[prost(string, tag="2")]
    pub wallet_name: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required"
    #[prost(string, tag="3")]
    pub encrypted_bundle: ::prost::alloc::string::String,
    /// @inject_tag: validate:"dive,required"
    #[prost(message, repeated, tag="4")]
    pub accounts: ::prost::alloc::vec::Vec<WalletAccountParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImportPrivateKeyIntent {
    /// @inject_tag: validate:"required,uuid"
    #[prost(string, tag="1")]
    pub user_id: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required,tk_label_length,tk_label"
    #[prost(string, tag="2")]
    pub private_key_name: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required"
    #[prost(string, tag="3")]
    pub encrypted_bundle: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required"
    #[prost(enumeration="super::super::common::v1::Curve", tag="4")]
    pub curve: i32,
    /// @inject_tag: validate:"dive"
    #[prost(enumeration="super::super::common::v1::AddressFormat", repeated, packed="false", tag="5")]
    pub address_formats: ::prost::alloc::vec::Vec<i32>,
}
/// Result of the intended action.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Result {
    #[prost(oneof="result::Inner", tags="1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53")]
    pub inner: ::core::option::Option<result::Inner>,
}
/// Nested message and enum types in `Result`.
pub mod result {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Inner {
        #[prost(message, tag="1")]
        CreateOrganizationResult(super::CreateOrganizationResult),
        #[prost(message, tag="3")]
        CreateAuthenticatorsResult(super::CreateAuthenticatorsResult),
        #[prost(message, tag="4")]
        CreateUsersResult(super::CreateUsersResult),
        #[prost(message, tag="5")]
        CreatePrivateKeysResult(super::CreatePrivateKeysResult),
        #[prost(message, tag="6")]
        CreateInvitationsResult(super::CreateInvitationsResult),
        #[prost(message, tag="7")]
        AcceptInvitationResult(super::AcceptInvitationResult),
        #[prost(message, tag="8")]
        SignRawPayloadResult(super::SignRawPayloadResult),
        #[prost(message, tag="9")]
        CreatePolicyResult(super::CreatePolicyResult),
        #[prost(message, tag="10")]
        DisablePrivateKeyResult(super::DisablePrivateKeyResult),
        #[prost(message, tag="11")]
        DeleteUsersResult(super::DeleteUsersResult),
        #[prost(message, tag="12")]
        DeleteAuthenticatorsResult(super::DeleteAuthenticatorsResult),
        #[prost(message, tag="13")]
        DeleteInvitationResult(super::DeleteInvitationResult),
        #[prost(message, tag="14")]
        DeleteOrganizationResult(super::DeleteOrganizationResult),
        #[prost(message, tag="15")]
        DeletePolicyResult(super::DeletePolicyResult),
        #[prost(message, tag="16")]
        CreateUserTagResult(super::CreateUserTagResult),
        #[prost(message, tag="17")]
        DeleteUserTagsResult(super::DeleteUserTagsResult),
        #[prost(message, tag="18")]
        SignTransactionResult(super::SignTransactionResult),
        #[prost(message, tag="19")]
        DeleteApiKeysResult(super::DeleteApiKeysResult),
        #[prost(message, tag="20")]
        CreateApiKeysResult(super::CreateApiKeysResult),
        #[prost(message, tag="21")]
        CreatePrivateKeyTagResult(super::CreatePrivateKeyTagResult),
        #[prost(message, tag="22")]
        DeletePrivateKeyTagsResult(super::DeletePrivateKeyTagsResult),
        #[prost(message, tag="23")]
        SetPaymentMethodResult(super::SetPaymentMethodResult),
        #[prost(message, tag="24")]
        ActivateBillingTierResult(super::ActivateBillingTierResult),
        #[prost(message, tag="25")]
        DeletePaymentMethodResult(super::DeletePaymentMethodResult),
        #[prost(message, tag="26")]
        CreateApiOnlyUsersResult(super::CreateApiOnlyUsersResult),
        #[prost(message, tag="27")]
        UpdateRootQuorumResult(super::UpdateRootQuorumResult),
        #[prost(message, tag="28")]
        UpdateUserTagResult(super::UpdateUserTagResult),
        #[prost(message, tag="29")]
        UpdatePrivateKeyTagResult(super::UpdatePrivateKeyTagResult),
        #[prost(message, tag="30")]
        CreateSubOrganizationResult(super::CreateSubOrganizationResult),
        #[prost(message, tag="31")]
        UpdateAllowedOriginsResult(super::UpdateAllowedOriginsResult),
        #[prost(message, tag="32")]
        CreatePrivateKeysResultV2(super::CreatePrivateKeysResultV2),
        #[prost(message, tag="33")]
        UpdateUserResult(super::UpdateUserResult),
        #[prost(message, tag="34")]
        UpdatePolicyResult(super::UpdatePolicyResult),
        #[prost(message, tag="35")]
        CreateSubOrganizationResultV3(super::CreateSubOrganizationResultV3),
        #[prost(message, tag="36")]
        CreateWalletResult(super::CreateWalletResult),
        #[prost(message, tag="37")]
        CreateWalletAccountsResult(super::CreateWalletAccountsResult),
        #[prost(message, tag="38")]
        InitUserEmailRecoveryResult(super::InitUserEmailRecoveryResult),
        #[prost(message, tag="39")]
        RecoverUserResult(super::RecoverUserResult),
        #[prost(message, tag="40")]
        SetOrganizationFeatureResult(super::SetOrganizationFeatureResult),
        #[prost(message, tag="41")]
        RemoveOrganizationFeatureResult(super::RemoveOrganizationFeatureResult),
        #[prost(message, tag="42")]
        ExportPrivateKeyResult(super::ExportPrivateKeyResult),
        #[prost(message, tag="43")]
        ExportWalletResult(super::ExportWalletResult),
        #[prost(message, tag="44")]
        CreateSubOrganizationResultV4(super::CreateSubOrganizationResultV4),
        #[prost(message, tag="45")]
        EmailAuthResult(super::EmailAuthResult),
        #[prost(message, tag="46")]
        ExportWalletAccountResult(super::ExportWalletAccountResult),
        #[prost(message, tag="47")]
        InitImportWalletResult(super::InitImportWalletResult),
        #[prost(message, tag="48")]
        ImportWalletResult(super::ImportWalletResult),
        #[prost(message, tag="49")]
        InitImportPrivateKeyResult(super::InitImportPrivateKeyResult),
        #[prost(message, tag="50")]
        ImportPrivateKeyResult(super::ImportPrivateKeyResult),
        #[prost(message, tag="51")]
        CreatePoliciesResult(super::CreatePoliciesResult),
        #[prost(message, tag="52")]
        SignRawPayloadsResult(super::SignRawPayloadsResult),
        #[prost(message, tag="53")]
        CreateReadOnlySessionResult(super::CreateReadOnlySessionResult),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeletePaymentMethodResult {
    #[prost(string, tag="1")]
    pub payment_method_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivateBillingTierResult {
    #[prost(string, tag="1")]
    pub product_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetPaymentMethodResult {
    #[prost(string, tag="1")]
    pub last_four: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub card_holder_name: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub card_holder_email: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateOrganizationResult {
    #[prost(string, tag="1")]
    pub organization_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateAuthenticatorsResult {
    #[prost(string, repeated, tag="1")]
    pub authenticator_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateApiKeysResult {
    #[prost(string, repeated, tag="1")]
    pub api_key_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateUsersResult {
    #[prost(string, repeated, tag="1")]
    pub user_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateUserResult {
    #[prost(string, tag="1")]
    pub user_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateApiOnlyUsersResult {
    #[prost(string, repeated, tag="1")]
    pub user_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateInvitationsResult {
    #[prost(string, repeated, tag="1")]
    pub invitation_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AcceptInvitationResult {
    #[prost(string, tag="1")]
    pub invitation_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub user_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePrivateKeysResult {
    #[prost(string, repeated, tag="2")]
    pub private_key_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePrivateKeysResultV2 {
    #[prost(message, repeated, tag="1")]
    pub private_keys: ::prost::alloc::vec::Vec<PrivateKeyResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PrivateKeyResult {
    #[prost(string, tag="1")]
    pub private_key_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="2")]
    pub addresses: ::prost::alloc::vec::Vec<Address>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Address {
    #[prost(enumeration="super::super::common::v1::AddressFormat", tag="1")]
    pub format: i32,
    #[prost(string, tag="2")]
    pub address: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignRawPayloadResult {
    #[prost(string, tag="1")]
    pub r: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub s: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub v: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignRawPayloadsResult {
    #[prost(message, repeated, tag="1")]
    pub signatures: ::prost::alloc::vec::Vec<SignRawPayloadResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateWalletResult {
    #[prost(string, tag="1")]
    pub wallet_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="2")]
    pub addresses: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateWalletAccountsResult {
    #[prost(string, repeated, tag="1")]
    pub addresses: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitUserEmailRecoveryResult {
    #[prost(string, tag="1")]
    pub user_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EmailAuthResult {
    #[prost(string, tag="1")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub api_key_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePolicyResult {
    #[prost(string, tag="1")]
    pub policy_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePoliciesResult {
    #[prost(string, repeated, tag="1")]
    pub policy_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdatePolicyResult {
    #[prost(string, tag="1")]
    pub policy_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateReadOnlySessionResult {
    #[prost(string, tag="1")]
    pub organization_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub organization_name: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub username: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub session: ::prost::alloc::string::String,
    #[prost(uint64, tag="6")]
    pub session_expiry: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DisablePrivateKeyResult {
    #[prost(string, tag="1")]
    pub private_key_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteUsersResult {
    #[prost(string, repeated, tag="1")]
    pub user_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteInvitationResult {
    #[prost(string, tag="1")]
    pub invitation_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteAuthenticatorsResult {
    #[prost(string, repeated, tag="1")]
    pub authenticator_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteApiKeysResult {
    #[prost(string, repeated, tag="1")]
    pub api_key_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteOrganizationResult {
    #[prost(string, tag="1")]
    pub organization_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeletePolicyResult {
    #[prost(string, tag="1")]
    pub policy_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateUserTagResult {
    #[prost(string, tag="1")]
    pub user_tag_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="3")]
    pub user_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateUserTagResult {
    #[prost(string, tag="1")]
    pub user_tag_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteUserTagsResult {
    #[prost(string, repeated, tag="1")]
    pub user_tag_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag="3")]
    pub user_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePrivateKeyTagResult {
    #[prost(string, tag="1")]
    pub private_key_tag_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="3")]
    pub private_key_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdatePrivateKeyTagResult {
    #[prost(string, tag="1")]
    pub private_key_tag_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeletePrivateKeyTagsResult {
    #[prost(string, repeated, tag="1")]
    pub private_key_tag_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag="3")]
    pub private_key_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignTransactionResult {
    #[prost(string, tag="1")]
    pub signed_transaction: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateRootQuorumResult {
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateAllowedOriginsResult {
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateSubOrganizationResult {
    #[prost(string, tag="1")]
    pub sub_organization_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="2")]
    pub root_user_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Going directly to V3 to have it in parity with intent versioning
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateSubOrganizationResultV3 {
    #[prost(string, tag="1")]
    pub sub_organization_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="2")]
    pub private_keys: ::prost::alloc::vec::Vec<PrivateKeyResult>,
    #[prost(string, repeated, tag="3")]
    pub root_user_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WalletResult {
    #[prost(string, tag="1")]
    pub wallet_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="2")]
    pub addresses: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Going directly to V4 to have it in parity with intent versioning
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateSubOrganizationResultV4 {
    #[prost(string, tag="1")]
    pub sub_organization_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub wallet: ::core::option::Option<WalletResult>,
    #[prost(string, repeated, tag="3")]
    pub root_user_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecoverUserResult {
    #[prost(string, repeated, tag="1")]
    pub authenticator_id: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetOrganizationFeatureResult {
    #[prost(message, repeated, tag="1")]
    pub features: ::prost::alloc::vec::Vec<super::super::data::v1::Feature>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveOrganizationFeatureResult {
    #[prost(message, repeated, tag="1")]
    pub features: ::prost::alloc::vec::Vec<super::super::data::v1::Feature>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExportPrivateKeyResult {
    #[prost(string, tag="1")]
    pub private_key_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub export_bundle: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExportWalletResult {
    #[prost(string, tag="1")]
    pub wallet_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub export_bundle: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExportWalletAccountResult {
    #[prost(string, tag="1")]
    pub address: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub export_bundle: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitImportWalletResult {
    #[prost(string, tag="1")]
    pub import_bundle: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImportWalletResult {
    #[prost(string, tag="1")]
    pub wallet_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="2")]
    pub addresses: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitImportPrivateKeyResult {
    #[prost(string, tag="1")]
    pub import_bundle: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImportPrivateKeyResult {
    #[prost(string, tag="1")]
    pub private_key_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="2")]
    pub addresses: ::prost::alloc::vec::Vec<Address>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiKeyParams {
    /// @inject_tag: validate:"required,tk_label_length,tk_label"
    #[prost(string, tag="1")]
    pub api_key_name: ::prost::alloc::string::String,
    /// @inject_tag: validate:"hexadecimal,len=66"
    #[prost(string, tag="2")]
    pub public_key: ::prost::alloc::string::String,
    #[prost(string, optional, tag="3")]
    pub expiration_seconds: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserParams {
    /// @inject_tag: validate:"required,tk_label_length,tk_label"
    #[prost(string, tag="2")]
    pub user_name: ::prost::alloc::string::String,
    /// @inject_tag: validate:"omitempty,email,tk_email"
    #[prost(string, optional, tag="3")]
    pub user_email: ::core::option::Option<::prost::alloc::string::String>,
    /// @inject_tag: validate:"required"
    #[prost(enumeration="super::super::common::v1::AccessType", tag="4")]
    pub access_type: i32,
    /// @inject_tag: validate:"dive,uuid"
    #[prost(message, repeated, tag="5")]
    pub api_keys: ::prost::alloc::vec::Vec<ApiKeyParams>,
    /// @inject_tag: validate:"dive"
    #[prost(message, repeated, tag="6")]
    pub authenticators: ::prost::alloc::vec::Vec<AuthenticatorParams>,
    /// @inject_tag: validate:"dive,uuid"
    #[prost(string, repeated, tag="7")]
    pub user_tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserParamsV2 {
    /// @inject_tag: validate:"required,tk_label_length,tk_label"
    #[prost(string, tag="2")]
    pub user_name: ::prost::alloc::string::String,
    /// @inject_tag: validate:"omitempty,email,tk_email"
    #[prost(string, optional, tag="3")]
    pub user_email: ::core::option::Option<::prost::alloc::string::String>,
    /// @inject_tag: validate:"dive,uuid"
    #[prost(message, repeated, tag="5")]
    pub api_keys: ::prost::alloc::vec::Vec<ApiKeyParams>,
    /// @inject_tag: validate:"dive"
    #[prost(message, repeated, tag="6")]
    pub authenticators: ::prost::alloc::vec::Vec<AuthenticatorParamsV2>,
    /// @inject_tag: validate:"dive,uuid"
    #[prost(string, repeated, tag="7")]
    pub user_tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthenticatorParams {
    /// @inject_tag: validate:"required,tk_label_length,tk_label"
    #[prost(string, tag="1")]
    pub authenticator_name: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required,uuid"
    #[prost(string, tag="2")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag="3")]
    pub attestation: ::core::option::Option<super::super::webauthn::v1::PublicKeyCredentialWithAttestation>,
    /// @inject_tag: validate:"required,max=256"
    #[prost(string, tag="4")]
    pub challenge: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthenticatorParamsV2 {
    /// @inject_tag: validate:"required,tk_label_length,tk_label"
    #[prost(string, tag="1")]
    pub authenticator_name: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required,max=256"
    #[prost(string, tag="2")]
    pub challenge: ::prost::alloc::string::String,
    #[prost(message, optional, tag="3")]
    pub attestation: ::core::option::Option<Attestation>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Attestation {
    /// @inject_tag: validate:"required,max=256"
    #[prost(string, tag="1")]
    pub credential_id: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required"
    #[prost(string, tag="2")]
    pub client_data_json: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required"
    #[prost(string, tag="3")]
    pub attestation_object: ::prost::alloc::string::String,
    #[prost(enumeration="super::super::webauthn::v1::AuthenticatorTransport", repeated, packed="false", tag="4")]
    pub transports: ::prost::alloc::vec::Vec<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InvitationParams {
    /// @inject_tag: validate:"required,tk_label_length,tk_label"
    #[prost(string, tag="1")]
    pub receiver_user_name: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required,email,tk_email"
    #[prost(string, tag="2")]
    pub receiver_user_email: ::prost::alloc::string::String,
    /// @inject_tag: validate:"dive,uuid"
    #[prost(string, repeated, tag="3")]
    pub receiver_user_tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// @inject_tag: validate:"required"
    #[prost(enumeration="super::super::common::v1::AccessType", tag="4")]
    pub access_type: i32,
    /// @inject_tag: validate:"required,uuid"
    #[prost(string, tag="5")]
    pub sender_user_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiOnlyUserParams {
    /// @inject_tag: validate:"required,tk_label_length,tk_label"
    #[prost(string, tag="1")]
    pub user_name: ::prost::alloc::string::String,
    /// @inject_tag: validate:"omitempty,email,tk_email"
    #[prost(string, optional, tag="2")]
    pub user_email: ::core::option::Option<::prost::alloc::string::String>,
    /// @inject_tag: validate:"dive,uuid"
    #[prost(string, repeated, tag="3")]
    pub user_tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// @inject_tag: validate:"dive,uuid"
    #[prost(message, repeated, tag="5")]
    pub api_keys: ::prost::alloc::vec::Vec<ApiKeyParams>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PrivateKeyParams {
    /// @inject_tag: validate:"required,tk_label_length,tk_label"
    #[prost(string, tag="1")]
    pub private_key_name: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required"
    #[prost(enumeration="super::super::common::v1::Curve", tag="2")]
    pub curve: i32,
    /// @inject_tag: validate:"dive,uuid"
    #[prost(string, repeated, tag="4")]
    pub private_key_tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// @inject_tag: validate:"dive"
    #[prost(enumeration="super::super::common::v1::AddressFormat", repeated, packed="false", tag="5")]
    pub address_formats: ::prost::alloc::vec::Vec<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WalletParams {
    /// @inject_tag: validate:"required,tk_label_length,tk_label"
    #[prost(string, tag="1")]
    pub wallet_name: ::prost::alloc::string::String,
    /// @inject_tag: validate:"dive,required"
    #[prost(message, repeated, tag="2")]
    pub accounts: ::prost::alloc::vec::Vec<WalletAccountParams>,
    /// @inject_tag: validate:"omitempty"
    #[prost(int32, optional, tag="3")]
    pub mnemonic_length: ::core::option::Option<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WalletAccountParams {
    /// @inject_tag: validate:"required"
    #[prost(enumeration="super::super::common::v1::Curve", tag="1")]
    pub curve: i32,
    /// @inject_tag: validate:"required"
    #[prost(enumeration="super::super::common::v1::PathFormat", tag="2")]
    pub path_format: i32,
    /// @inject_tag: validate:"required"
    #[prost(string, tag="3")]
    pub path: ::prost::alloc::string::String,
    /// @inject_tag: validate:"required"
    #[prost(enumeration="super::super::common::v1::AddressFormat", tag="4")]
    pub address_format: i32,
}
//
// These are all of the types of user-facing activities on Turnkey.
// We use this to guide the polymorphic parsing of activity requests.
// An activity type maps to a pair of (Intent, Result)

/// Type of Activity, such as Add User, or Sign Transaction.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ActivityType {
    Unspecified = 0,
    CreateApiKeys = 1,
    CreateUsers = 2,
    CreatePrivateKeys = 3,
    SignRawPayload = 4,
    CreateInvitations = 5,
    AcceptInvitation = 6,
    CreatePolicy = 7,
    DisablePrivateKey = 8,
    DeleteUsers = 9,
    DeleteApiKeys = 10,
    DeleteInvitation = 11,
    DeleteOrganization = 12,
    DeletePolicy = 13,
    CreateUserTag = 14,
    DeleteUserTags = 15,
    CreateOrganization = 16,
    SignTransaction = 17,
    ApproveActivity = 18,
    RejectActivity = 19,
    DeleteAuthenticators = 20,
    CreateAuthenticators = 21,
    CreatePrivateKeyTag = 22,
    DeletePrivateKeyTags = 23,
    SetPaymentMethod = 24,
    ActivateBillingTier = 25,
    DeletePaymentMethod = 26,
    CreatePolicyV2 = 27,
    CreatePolicyV3 = 28,
    CreateApiOnlyUsers = 29,
    UpdateRootQuorum = 30,
    UpdateUserTag = 31,
    UpdatePrivateKeyTag = 32,
    CreateAuthenticatorsV2 = 33,
    CreateOrganizationV2 = 34,
    CreateUsersV2 = 35,
    AcceptInvitationV2 = 36,
    CreateSubOrganization = 37,
    CreateSubOrganizationV2 = 38,
    UpdateAllowedOrigins = 39,
    CreatePrivateKeysV2 = 40,
    UpdateUser = 41,
    UpdatePolicy = 42,
    SetPaymentMethodV2 = 43,
    CreateSubOrganizationV3 = 44,
    CreateWallet = 45,
    CreateWalletAccounts = 46,
    InitUserEmailRecovery = 47,
    RecoverUser = 48,
    SetOrganizationFeature = 49,
    RemoveOrganizationFeature = 50,
    SignRawPayloadV2 = 51,
    SignTransactionV2 = 52,
    ExportPrivateKey = 53,
    ExportWallet = 54,
    CreateSubOrganizationV4 = 55,
    EmailAuth = 56,
    ExportWalletAccount = 57,
    InitImportWallet = 58,
    ImportWallet = 59,
    InitImportPrivateKey = 60,
    ImportPrivateKey = 61,
    CreatePolicies = 62,
    SignRawPayloads = 63,
    CreateReadOnlySession = 64,
}
impl ActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ActivityType::Unspecified => "ACTIVITY_TYPE_UNSPECIFIED",
            ActivityType::CreateApiKeys => "ACTIVITY_TYPE_CREATE_API_KEYS",
            ActivityType::CreateUsers => "ACTIVITY_TYPE_CREATE_USERS",
            ActivityType::CreatePrivateKeys => "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS",
            ActivityType::SignRawPayload => "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD",
            ActivityType::CreateInvitations => "ACTIVITY_TYPE_CREATE_INVITATIONS",
            ActivityType::AcceptInvitation => "ACTIVITY_TYPE_ACCEPT_INVITATION",
            ActivityType::CreatePolicy => "ACTIVITY_TYPE_CREATE_POLICY",
            ActivityType::DisablePrivateKey => "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY",
            ActivityType::DeleteUsers => "ACTIVITY_TYPE_DELETE_USERS",
            ActivityType::DeleteApiKeys => "ACTIVITY_TYPE_DELETE_API_KEYS",
            ActivityType::DeleteInvitation => "ACTIVITY_TYPE_DELETE_INVITATION",
            ActivityType::DeleteOrganization => "ACTIVITY_TYPE_DELETE_ORGANIZATION",
            ActivityType::DeletePolicy => "ACTIVITY_TYPE_DELETE_POLICY",
            ActivityType::CreateUserTag => "ACTIVITY_TYPE_CREATE_USER_TAG",
            ActivityType::DeleteUserTags => "ACTIVITY_TYPE_DELETE_USER_TAGS",
            ActivityType::CreateOrganization => "ACTIVITY_TYPE_CREATE_ORGANIZATION",
            ActivityType::SignTransaction => "ACTIVITY_TYPE_SIGN_TRANSACTION",
            ActivityType::ApproveActivity => "ACTIVITY_TYPE_APPROVE_ACTIVITY",
            ActivityType::RejectActivity => "ACTIVITY_TYPE_REJECT_ACTIVITY",
            ActivityType::DeleteAuthenticators => "ACTIVITY_TYPE_DELETE_AUTHENTICATORS",
            ActivityType::CreateAuthenticators => "ACTIVITY_TYPE_CREATE_AUTHENTICATORS",
            ActivityType::CreatePrivateKeyTag => "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG",
            ActivityType::DeletePrivateKeyTags => "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS",
            ActivityType::SetPaymentMethod => "ACTIVITY_TYPE_SET_PAYMENT_METHOD",
            ActivityType::ActivateBillingTier => "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER",
            ActivityType::DeletePaymentMethod => "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD",
            ActivityType::CreatePolicyV2 => "ACTIVITY_TYPE_CREATE_POLICY_V2",
            ActivityType::CreatePolicyV3 => "ACTIVITY_TYPE_CREATE_POLICY_V3",
            ActivityType::CreateApiOnlyUsers => "ACTIVITY_TYPE_CREATE_API_ONLY_USERS",
            ActivityType::UpdateRootQuorum => "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM",
            ActivityType::UpdateUserTag => "ACTIVITY_TYPE_UPDATE_USER_TAG",
            ActivityType::UpdatePrivateKeyTag => "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG",
            ActivityType::CreateAuthenticatorsV2 => "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2",
            ActivityType::CreateOrganizationV2 => "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2",
            ActivityType::CreateUsersV2 => "ACTIVITY_TYPE_CREATE_USERS_V2",
            ActivityType::AcceptInvitationV2 => "ACTIVITY_TYPE_ACCEPT_INVITATION_V2",
            ActivityType::CreateSubOrganization => "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION",
            ActivityType::CreateSubOrganizationV2 => "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2",
            ActivityType::UpdateAllowedOrigins => "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS",
            ActivityType::CreatePrivateKeysV2 => "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2",
            ActivityType::UpdateUser => "ACTIVITY_TYPE_UPDATE_USER",
            ActivityType::UpdatePolicy => "ACTIVITY_TYPE_UPDATE_POLICY",
            ActivityType::SetPaymentMethodV2 => "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2",
            ActivityType::CreateSubOrganizationV3 => "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3",
            ActivityType::CreateWallet => "ACTIVITY_TYPE_CREATE_WALLET",
            ActivityType::CreateWalletAccounts => "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS",
            ActivityType::InitUserEmailRecovery => "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY",
            ActivityType::RecoverUser => "ACTIVITY_TYPE_RECOVER_USER",
            ActivityType::SetOrganizationFeature => "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE",
            ActivityType::RemoveOrganizationFeature => "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE",
            ActivityType::SignRawPayloadV2 => "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2",
            ActivityType::SignTransactionV2 => "ACTIVITY_TYPE_SIGN_TRANSACTION_V2",
            ActivityType::ExportPrivateKey => "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY",
            ActivityType::ExportWallet => "ACTIVITY_TYPE_EXPORT_WALLET",
            ActivityType::CreateSubOrganizationV4 => "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4",
            ActivityType::EmailAuth => "ACTIVITY_TYPE_EMAIL_AUTH",
            ActivityType::ExportWalletAccount => "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT",
            ActivityType::InitImportWallet => "ACTIVITY_TYPE_INIT_IMPORT_WALLET",
            ActivityType::ImportWallet => "ACTIVITY_TYPE_IMPORT_WALLET",
            ActivityType::InitImportPrivateKey => "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY",
            ActivityType::ImportPrivateKey => "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY",
            ActivityType::CreatePolicies => "ACTIVITY_TYPE_CREATE_POLICIES",
            ActivityType::SignRawPayloads => "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS",
            ActivityType::CreateReadOnlySession => "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ACTIVITY_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "ACTIVITY_TYPE_CREATE_API_KEYS" => Some(Self::CreateApiKeys),
            "ACTIVITY_TYPE_CREATE_USERS" => Some(Self::CreateUsers),
            "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" => Some(Self::CreatePrivateKeys),
            "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" => Some(Self::SignRawPayload),
            "ACTIVITY_TYPE_CREATE_INVITATIONS" => Some(Self::CreateInvitations),
            "ACTIVITY_TYPE_ACCEPT_INVITATION" => Some(Self::AcceptInvitation),
            "ACTIVITY_TYPE_CREATE_POLICY" => Some(Self::CreatePolicy),
            "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" => Some(Self::DisablePrivateKey),
            "ACTIVITY_TYPE_DELETE_USERS" => Some(Self::DeleteUsers),
            "ACTIVITY_TYPE_DELETE_API_KEYS" => Some(Self::DeleteApiKeys),
            "ACTIVITY_TYPE_DELETE_INVITATION" => Some(Self::DeleteInvitation),
            "ACTIVITY_TYPE_DELETE_ORGANIZATION" => Some(Self::DeleteOrganization),
            "ACTIVITY_TYPE_DELETE_POLICY" => Some(Self::DeletePolicy),
            "ACTIVITY_TYPE_CREATE_USER_TAG" => Some(Self::CreateUserTag),
            "ACTIVITY_TYPE_DELETE_USER_TAGS" => Some(Self::DeleteUserTags),
            "ACTIVITY_TYPE_CREATE_ORGANIZATION" => Some(Self::CreateOrganization),
            "ACTIVITY_TYPE_SIGN_TRANSACTION" => Some(Self::SignTransaction),
            "ACTIVITY_TYPE_APPROVE_ACTIVITY" => Some(Self::ApproveActivity),
            "ACTIVITY_TYPE_REJECT_ACTIVITY" => Some(Self::RejectActivity),
            "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" => Some(Self::DeleteAuthenticators),
            "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" => Some(Self::CreateAuthenticators),
            "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" => Some(Self::CreatePrivateKeyTag),
            "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" => Some(Self::DeletePrivateKeyTags),
            "ACTIVITY_TYPE_SET_PAYMENT_METHOD" => Some(Self::SetPaymentMethod),
            "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" => Some(Self::ActivateBillingTier),
            "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" => Some(Self::DeletePaymentMethod),
            "ACTIVITY_TYPE_CREATE_POLICY_V2" => Some(Self::CreatePolicyV2),
            "ACTIVITY_TYPE_CREATE_POLICY_V3" => Some(Self::CreatePolicyV3),
            "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" => Some(Self::CreateApiOnlyUsers),
            "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" => Some(Self::UpdateRootQuorum),
            "ACTIVITY_TYPE_UPDATE_USER_TAG" => Some(Self::UpdateUserTag),
            "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" => Some(Self::UpdatePrivateKeyTag),
            "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" => Some(Self::CreateAuthenticatorsV2),
            "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" => Some(Self::CreateOrganizationV2),
            "ACTIVITY_TYPE_CREATE_USERS_V2" => Some(Self::CreateUsersV2),
            "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" => Some(Self::AcceptInvitationV2),
            "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" => Some(Self::CreateSubOrganization),
            "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" => Some(Self::CreateSubOrganizationV2),
            "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" => Some(Self::UpdateAllowedOrigins),
            "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" => Some(Self::CreatePrivateKeysV2),
            "ACTIVITY_TYPE_UPDATE_USER" => Some(Self::UpdateUser),
            "ACTIVITY_TYPE_UPDATE_POLICY" => Some(Self::UpdatePolicy),
            "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" => Some(Self::SetPaymentMethodV2),
            "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" => Some(Self::CreateSubOrganizationV3),
            "ACTIVITY_TYPE_CREATE_WALLET" => Some(Self::CreateWallet),
            "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" => Some(Self::CreateWalletAccounts),
            "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" => Some(Self::InitUserEmailRecovery),
            "ACTIVITY_TYPE_RECOVER_USER" => Some(Self::RecoverUser),
            "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" => Some(Self::SetOrganizationFeature),
            "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" => Some(Self::RemoveOrganizationFeature),
            "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" => Some(Self::SignRawPayloadV2),
            "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" => Some(Self::SignTransactionV2),
            "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" => Some(Self::ExportPrivateKey),
            "ACTIVITY_TYPE_EXPORT_WALLET" => Some(Self::ExportWallet),
            "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" => Some(Self::CreateSubOrganizationV4),
            "ACTIVITY_TYPE_EMAIL_AUTH" => Some(Self::EmailAuth),
            "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" => Some(Self::ExportWalletAccount),
            "ACTIVITY_TYPE_INIT_IMPORT_WALLET" => Some(Self::InitImportWallet),
            "ACTIVITY_TYPE_IMPORT_WALLET" => Some(Self::ImportWallet),
            "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" => Some(Self::InitImportPrivateKey),
            "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" => Some(Self::ImportPrivateKey),
            "ACTIVITY_TYPE_CREATE_POLICIES" => Some(Self::CreatePolicies),
            "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" => Some(Self::SignRawPayloads),
            "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" => Some(Self::CreateReadOnlySession),
            _ => None,
        }
    }
}
/// The current processing status of an Activity.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ActivityStatus {
    Unspecified = 0,
    Created = 1,
    Pending = 2,
    Completed = 3,
    Failed = 4,
    ConsensusNeeded = 5,
    Rejected = 6,
}
impl ActivityStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ActivityStatus::Unspecified => "ACTIVITY_STATUS_UNSPECIFIED",
            ActivityStatus::Created => "ACTIVITY_STATUS_CREATED",
            ActivityStatus::Pending => "ACTIVITY_STATUS_PENDING",
            ActivityStatus::Completed => "ACTIVITY_STATUS_COMPLETED",
            ActivityStatus::Failed => "ACTIVITY_STATUS_FAILED",
            ActivityStatus::ConsensusNeeded => "ACTIVITY_STATUS_CONSENSUS_NEEDED",
            ActivityStatus::Rejected => "ACTIVITY_STATUS_REJECTED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ACTIVITY_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "ACTIVITY_STATUS_CREATED" => Some(Self::Created),
            "ACTIVITY_STATUS_PENDING" => Some(Self::Pending),
            "ACTIVITY_STATUS_COMPLETED" => Some(Self::Completed),
            "ACTIVITY_STATUS_FAILED" => Some(Self::Failed),
            "ACTIVITY_STATUS_CONSENSUS_NEEDED" => Some(Self::ConsensusNeeded),
            "ACTIVITY_STATUS_REJECTED" => Some(Self::Rejected),
            _ => None,
        }
    }
}
