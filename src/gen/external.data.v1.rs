// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Timestamp {
    /// Stringified int 
    #[prost(string, tag="1")]
    pub seconds: ::prost::alloc::string::String,
    /// Stringified int 
    #[prost(string, tag="2")]
    pub nanos: ::prost::alloc::string::String,
}
/// This proto definition is used in our external-facing APIs.
/// It's important to leverage annotations because they're used in our external interfaces.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrganizationData {
    #[prost(string, tag="2")]
    pub organization_id: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="4")]
    pub users: ::prost::alloc::vec::Vec<User>,
    #[prost(message, repeated, tag="5")]
    pub policies: ::prost::alloc::vec::Vec<Policy>,
    #[prost(message, repeated, tag="6")]
    pub private_keys: ::prost::alloc::vec::Vec<PrivateKey>,
    #[prost(message, repeated, tag="7")]
    pub invitations: ::prost::alloc::vec::Vec<Invitation>,
    #[prost(message, repeated, tag="8")]
    pub tags: ::prost::alloc::vec::Vec<Tag>,
    #[prost(message, optional, tag="16")]
    pub root_quorum: ::core::option::Option<Quorum>,
    #[prost(message, repeated, tag="18")]
    pub features: ::prost::alloc::vec::Vec<super::super::super::immutable::data::v1::Feature>,
    #[prost(message, repeated, tag="19")]
    pub wallets: ::prost::alloc::vec::Vec<Wallet>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct User {
    #[prost(string, tag="1")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub user_name: ::prost::alloc::string::String,
    /// some users do not have emails (programmatic users)
    #[prost(string, optional, tag="3")]
    pub user_email: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag="5")]
    pub authenticators: ::prost::alloc::vec::Vec<Authenticator>,
    #[prost(message, repeated, tag="6")]
    pub api_keys: ::prost::alloc::vec::Vec<ApiKey>,
    #[prost(string, repeated, tag="7")]
    pub user_tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag="8")]
    pub created_at: ::core::option::Option<Timestamp>,
    #[prost(message, optional, tag="9")]
    pub updated_at: ::core::option::Option<Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiKey {
    #[prost(message, optional, tag="1")]
    pub credential: ::core::option::Option<Credential>,
    #[prost(string, tag="3")]
    pub api_key_id: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub api_key_name: ::prost::alloc::string::String,
    #[prost(message, optional, tag="5")]
    pub created_at: ::core::option::Option<Timestamp>,
    #[prost(message, optional, tag="6")]
    pub updated_at: ::core::option::Option<Timestamp>,
    #[prost(uint64, optional, tag="7")]
    pub expiration_seconds: ::core::option::Option<u64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Authenticator {
    #[prost(enumeration="super::super::super::immutable::webauthn::v1::AuthenticatorTransport", repeated, packed="false", tag="1")]
    pub transports: ::prost::alloc::vec::Vec<i32>,
    #[prost(string, tag="2")]
    pub attestation_type: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub aaguid: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub credential_id: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub model: ::prost::alloc::string::String,
    #[prost(message, optional, tag="7")]
    pub credential: ::core::option::Option<Credential>,
    #[prost(string, tag="8")]
    pub authenticator_id: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub authenticator_name: ::prost::alloc::string::String,
    #[prost(message, optional, tag="10")]
    pub created_at: ::core::option::Option<Timestamp>,
    #[prost(message, optional, tag="11")]
    pub updated_at: ::core::option::Option<Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Credential {
    #[prost(string, tag="1")]
    pub public_key: ::prost::alloc::string::String,
    /// To distinguish the credential type (webauthn, API key)
    #[prost(enumeration="super::super::super::immutable::common::v1::CredentialType", tag="2")]
    pub r#type: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Policy {
    #[prost(string, tag="1")]
    pub policy_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub policy_name: ::prost::alloc::string::String,
    #[prost(enumeration="super::super::super::immutable::common::v1::Effect", tag="3")]
    pub effect: i32,
    #[prost(message, optional, tag="5")]
    pub created_at: ::core::option::Option<Timestamp>,
    #[prost(message, optional, tag="6")]
    pub updated_at: ::core::option::Option<Timestamp>,
    #[prost(string, tag="7")]
    pub notes: ::prost::alloc::string::String,
    #[prost(string, optional, tag="8")]
    pub consensus: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="9")]
    pub condition: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PrivateKey {
    #[prost(string, tag="1")]
    pub private_key_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub public_key: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub private_key_name: ::prost::alloc::string::String,
    #[prost(enumeration="super::super::super::immutable::common::v1::Curve", tag="4")]
    pub curve: i32,
    #[prost(message, repeated, tag="5")]
    pub addresses: ::prost::alloc::vec::Vec<Address>,
    #[prost(string, repeated, tag="6")]
    pub private_key_tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag="7")]
    pub created_at: ::core::option::Option<Timestamp>,
    #[prost(message, optional, tag="8")]
    pub updated_at: ::core::option::Option<Timestamp>,
    #[prost(bool, tag="9")]
    pub exported: bool,
    #[prost(bool, tag="10")]
    pub imported: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Address {
    #[prost(enumeration="super::super::super::immutable::common::v1::AddressFormat", tag="1")]
    pub format: i32,
    #[prost(string, tag="2")]
    pub address: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Invitation {
    #[prost(string, tag="1")]
    pub invitation_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub receiver_user_name: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub receiver_email: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="4")]
    pub receiver_user_tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(enumeration="super::super::super::immutable::common::v1::AccessType", tag="5")]
    pub access_type: i32,
    #[prost(enumeration="InvitationStatus", tag="6")]
    pub status: i32,
    #[prost(message, optional, tag="7")]
    pub created_at: ::core::option::Option<Timestamp>,
    #[prost(message, optional, tag="8")]
    pub updated_at: ::core::option::Option<Timestamp>,
    #[prost(string, tag="9")]
    pub sender_user_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Tag {
    #[prost(string, tag="1")]
    pub tag_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub tag_name: ::prost::alloc::string::String,
    #[prost(enumeration="TagType", tag="3")]
    pub tag_type: i32,
    #[prost(message, optional, tag="4")]
    pub created_at: ::core::option::Option<Timestamp>,
    #[prost(message, optional, tag="5")]
    pub updated_at: ::core::option::Option<Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Quorum {
    #[prost(int32, tag="1")]
    pub threshold: i32,
    #[prost(string, repeated, tag="2")]
    pub user_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Wallet {
    #[prost(string, tag="1")]
    pub wallet_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub wallet_name: ::prost::alloc::string::String,
    #[prost(message, optional, tag="3")]
    pub created_at: ::core::option::Option<Timestamp>,
    #[prost(message, optional, tag="4")]
    pub updated_at: ::core::option::Option<Timestamp>,
    #[prost(bool, tag="5")]
    pub exported: bool,
    #[prost(bool, tag="6")]
    pub imported: bool,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum InvitationStatus {
    Unspecified = 0,
    Created = 1,
    Accepted = 2,
    Revoked = 3,
}
impl InvitationStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            InvitationStatus::Unspecified => "INVITATION_STATUS_UNSPECIFIED",
            InvitationStatus::Created => "INVITATION_STATUS_CREATED",
            InvitationStatus::Accepted => "INVITATION_STATUS_ACCEPTED",
            InvitationStatus::Revoked => "INVITATION_STATUS_REVOKED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "INVITATION_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "INVITATION_STATUS_CREATED" => Some(Self::Created),
            "INVITATION_STATUS_ACCEPTED" => Some(Self::Accepted),
            "INVITATION_STATUS_REVOKED" => Some(Self::Revoked),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TagType {
    Unspecified = 0,
    User = 1,
    PrivateKey = 3,
}
impl TagType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            TagType::Unspecified => "TAG_TYPE_UNSPECIFIED",
            TagType::User => "TAG_TYPE_USER",
            TagType::PrivateKey => "TAG_TYPE_PRIVATE_KEY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TAG_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "TAG_TYPE_USER" => Some(Self::User),
            "TAG_TYPE_PRIVATE_KEY" => Some(Self::PrivateKey),
            _ => None,
        }
    }
}
/// An account derived from a Wallet
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WalletAccount {
    #[prost(string, tag="1")]
    pub organization_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub wallet_id: ::prost::alloc::string::String,
    #[prost(enumeration="super::super::super::immutable::common::v1::Curve", tag="3")]
    pub curve: i32,
    #[prost(enumeration="super::super::super::immutable::common::v1::PathFormat", tag="4")]
    pub path_format: i32,
    #[prost(string, tag="5")]
    pub path: ::prost::alloc::string::String,
    #[prost(enumeration="super::super::super::immutable::common::v1::AddressFormat", tag="6")]
    pub address_format: i32,
    #[prost(string, tag="7")]
    pub address: ::prost::alloc::string::String,
    #[prost(message, optional, tag="8")]
    pub created_at: ::core::option::Option<Timestamp>,
    /// TODO(tim): temporarily removing this since it's always "false"
    /// bool exported = 10 [
    ///   (google.api.field_behavior) = REQUIRED,
    ///   (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "True when a given Account is exported, false otherwise."}
    /// ];
    #[prost(message, optional, tag="9")]
    pub updated_at: ::core::option::Option<Timestamp>,
}
